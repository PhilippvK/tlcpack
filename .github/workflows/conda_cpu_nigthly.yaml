# GH actions.
name: Conda-CPU-Nightly

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '20 6 * * *' # 6:20 AM UTC

jobs:
  Build:
    strategy:
      fail-fast: false
      matrix:
        # os: [windows-2019, macOS-13, ubuntu-latest]
        os: [ubuntu-latest]
        pkg: ['tlcpack', 'tlcpack-nightly']
        python-version: ["3.10"]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Maximize build space
      if: runner.os == 'Linux'
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 32768
        temp-reserve-mb: 1024
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      env:
        CACHE_NUMBER: 0
      with:
        path: ~/conda_pkgs_dir
        key: ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{ hashFiles('conda/build-environment.yaml') }}
    - uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: ${{ matrix.python-version }}
        activate-environment: tlcpack-build
        channels: conda-forge,defaults
        channel-priority: disabled
        environment-file: conda/build-environment.yaml
        auto-activate-base: false
        use-only-tar-bz2: true
        use-mamba: false
    - name: Conda info
      run: |
        conda info
        conda list
    - name: TVM checkout
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'
        repository: apache/tvm
        path: tvm
    - name: Sync Package
      run: python3 common/sync_package.py ${{ matrix.pkg }} --skip-checkout
    - name: Conda-Build@Win
      if: startsWith(matrix.os, 'windows')
      shell: cmd /C call {0}
      run: >-
    - name: Conda-Build@MacOS
      if: startsWith(matrix.os, 'macOS')
      shell: bash -l {0}
      env:
         MACOSX_DEPLOYMENT_TARGET: 11.7
      run: >-
        conda build --output-folder=conda/pkg -m conda/build_config.yaml conda/recipe
    - name: Conda-Build@Linux
      if: startsWith(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        # conda install conda-forge::libmamba
        # conda install --solver=classic conda-forge::conda-libmamba-solver conda-forge::libmamba conda-forge::libmambapy conda-forge::libarchive
        # conda install -n base conda-libmamba-solver
        # conda config --set solver libmamba
        conda config --set solver classic
        conda build --output-folder=conda/pkg -m conda/build_config.yaml conda/recipe
    - name: Conda-Deploy@Win
      if: startsWith(matrix.os, 'windows') && github.ref == 'refs/heads/main' && github.repository == 'tlc-pack/tlcpack'
      shell: cmd /C call {0}
      env:
        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
      run: >-
        anaconda upload --force --label main conda/pkg/win-64/*.tar.bz2
    - name: Conda-Deploy@MacOS
      if: startsWith(matrix.os, 'macOS') && github.ref == 'refs/heads/main' && github.repository == 'tlc-pack/tlcpack'
      shell: bash -l {0}
      env:
        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
      run: >-
        anaconda upload --force --label main conda/pkg/osx-64/*.tar.bz2
    - name: Conda-Deploy@Linux
      if: startsWith(matrix.os, 'ubuntu') && github.ref == 'refs/heads/main' && github.repository == 'tlc-pack/tlcpack'
      shell: bash -l {0}
      env:
        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
      run: >-
        anaconda upload --force --label main conda/pkg/linux-64/*.tar.bz2
